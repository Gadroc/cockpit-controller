buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:1.0.5'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/gradle/javafx8.gradle"
apply plugin: 'org.hidetake.ssh'

mainClassName = "com.gadrocsworkshop.cockpit.CockpitController"
sourceCompatibility = 1.8
version = '1.0.1'

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

remotes {
    testCockpit {
        host = '192.168.0.122'
        user = 'pi'
        knownHosts = allowAnyHosts
        identity = file('testcockpit.ppk')
    }
    cockpit {
        host = 'cockpit.local'
        user = 'pi'
        knownHosts = allowAnyHosts
        identity = file('testcockpit.ppk')
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/groups/public"
    }
    maven {
        url "https://raw.github.com/bitcoin-solutions/mbhd-maven/master/releases"
    }
}

dependencies {
    compile group: 'com.gadrocsworkshop', name: 'dcs-bios-receiver', version: '1.2.3'
    compile group: 'com.pi4j', name: 'pi4j-core', version: '1.0'
    compile group: 'org.hid4java', name: 'hid4java', version: '0.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task deployTest(dependsOn: distZip) << {
    ssh.run {
        session(remotes.testCockpit) {
            execute "sudo /etc/init.d/cockpit stop"
            execute "rm -rf ${project.name}-${version}", ignoreError: true
            put "build/distributions/${project.name}-${version}.zip", "${project.name}-${version}.zip"
            execute "unzip ${project.name}-${version}"
            execute "sudo /etc/init.d/cockpit start"
        }
    }
}

task deploy(dependsOn: distZip) << {
    ssh.run {
        session(remotes.cockpit) {
            execute "sudo /etc/init.d/cockpit stop"
            execute "rm -rf ${project.name}-${version}", ignoreError: true
            put "build/distributions/${project.name}-${version}.zip", "${project.name}-${version}.zip"
            execute "unzip ${project.name}-${version}"
            execute "sudo /etc/init.d/cockpit start"
        }
    }
}